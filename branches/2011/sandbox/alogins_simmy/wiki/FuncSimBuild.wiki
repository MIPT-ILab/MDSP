#summary Methods of building the programs of our project.

= Introduction =

Currently our source code produces three binaries: `funcsim`, `asm` and `test`. They all are usually built in the same compile/link run.

= Visual Studio =

If you have opened the IDE with `mdsp.sln` solution then you can build it with `Ctrl-Shift-B` default key combination or through "Build->Build Solution" menu.

Alternatively, you can build the solution froma command line with 
{{{
C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe mdsp.sln /build
}}}

Be sure to use the correct path to *DEVENV.EXE* (`C:\Program Files\...`).

`/build` flag tells Visual Studio to build the solution file specified (`mdsp.sln`)

After the command is succesfully finished, the new binaries will appear in `Debug/` or `Release/` folder. To specify the configuration different from default use the following lines:
{{{
DEVENV.EXE /build "Debug|Win32" mdsp.sln
DEVENV.EXE /build "Release|Win32" mdsp.sln
}}}


You can also try the following flags: `/rebuild`, `/clean`. The most interesting switch is `/?` -- this prints help with all documented switches explained. 

For more details see http://msdn.microsoft.com/en-us/library/xee0c8y7(v=VS.90).aspx


= Makefile build = 

Makefile build is a cross platform feature, it allows you to build the code uniformly on all supported platforms. It is done from a command line (`CMD.EXE` in Windows, `Xterm` or just any other terminal in Unix)

== Release build ==

To start a build, change a directory to one with Makefile, and type
{{{
make
}}}

After the 'make' process has succeeded the new binaries are in folder `Release/`,
object files are in folder 'Release/build/'

You can also build a particular target by specifying its name:
{{{
make funcsim
make test
make asm
make clean
}}}


== Debug build ==

For debug build, type

{{{
make DEBUG=yes
}}}

After the 'make' process has succeeded the new binaries are in folder `Debug/`,
object files are in folder 'Debug/build/'


== Windows ==

If you see the messages like "make program was not found" then make sure that you've set up the paths correctly. If you have set up CygWin, the usual position is `c:\cygwin\bin\make.exe`. For MinGW it is usually `C:\mingw\bin\make.exe`. Google around to understand how to set up %PATH% variable in Windows.

== Linux ==

Everything should just work. If not, make sure you've installed `gcc` and `binutils` packages.

= Eclipse CDT =

Eclipse CDT IDE build process is based on Makefiles specified. So, to build from this IDE first provide a proper Makefile to the project (look for "Make Targets" tab and find our Makefile there), then double click the green double concentric circle.

== Windows ==

Eclipse CDT needs either CygWin or MinGW installed. So, may be a bit of tuning will be required before the IDE finds the binutils installed.

== Linux ==

Just make sure that you have installed `gcc` package, and Eclipse will find it automatically in most cases.

------------
*TODO* This page should be expanded as building from Eclipse is often complicated and vague.